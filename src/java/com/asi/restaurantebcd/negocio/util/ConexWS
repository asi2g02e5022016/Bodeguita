 public String consumirWebservices(String usr,
            String metodo, String recurso, String jsonDatos) throws Exception {
        String respuesta;
        Segmodulo modu = crudPos.buscarEntidad(Segmodulo.class,
                Modulo.GENERAL.getCodigo());
        if (modu == null) {
            throw new Exception("El modulo al que pertenece la peticion "
                    + "no existe.");
        } else if (modu.getUrlbase() == null
                || modu.getUrlbase().isEmpty()) {
            throw new Exception("El modulo al que pertenece la peticion "
                    + "no posee una URL de acceso.");
        }       
        String token = crearTokenWebservice(usr);
        Map mapHeader = new HashMap();
        mapHeader.put("User", encriptarStringJson(usr));
        mapHeader.put("fecha", util.formatearFecha(new Date(), "dd/MM/yyyy"));
        mapHeader.put("Token", token);
        try {
            String jsonHeader = new Gson().toJson(mapHeader);
            Client client = Client.create();
            WebResource webResource = client.resource("urlbase");
            WebResource.Builder buildws;
            buildws = webResource.path(recurso).path(metodo)
                    .header("autorizacion", jsonHeader);
            String encriptado = null; 
            ClientResponse response;
            if (jsonDatos != null) {
               encriptado = encriptarStringJson(jsonDatos);
            }
            if (encriptado != null) {
                response = buildws.post(ClientResponse.class, encriptado);
            } else {
                response = buildws.post(ClientResponse.class);
            }
            String rs = response.getEntity(String.class);
               Gson json = new Gson();
        ReponseWs ws = json.fromJson(rs, ReponseWs.class);
            if (ws != null && ws.getError().equals("1")) {
                throw new Exception("Integrity: " +ws.getDescripcion());
            }
            String desencrip = Encriptacion.decrypt(ws.getContent());
            respuesta = desencrip;
            return respuesta;
        } catch (Exception e) {
            if (e instanceof ConnectException
                    || e instanceof ClientHandlerException
                    || e instanceof NoRouteToHostException) {
                throw new Exception("No se pudo establecer comunicacion con servicios web,"
                        + " comuniquese con el administrador");
            }
            throw new Exception(e.getMessage());
        }
    }











/////////////////////////




  public ReponseWs validarAccesoSinTokenIntWS(String auth) throws Exception {
        StringBuffer str = new StringBuffer();
        if (auth == null || auth.equals("")) {
            str.append("No se puede acceder al recurso solicitado.");
            str.append("El usuario no cuenta con las credenciales.");
            throw new Exception(str.toString());
        }
        Gson json = new Gson();
        HashMap autorizmap;
        try {
            autorizmap = json.fromJson(auth, HashMap.class);
        } catch (Exception e) {
            str.append("Error al convertir los parametros");
            str.append("de Authorization.");
            str.append(e.getMessage());
            throw new Exception(str.toString());
        }
        String fecha = Parametro.getParamValue(autorizmap, "fecha");
        String user =  Parametro.getParamValue(autorizmap, "User");
        String token = Parametro.getParamValue(autorizmap, "Token");
        String updater = Parametro.getParamValue(autorizmap, "updater");
        if (user == null || user.equals("")) {
            str.append("No existe usuario de autenticacion.");
            throw new Exception(str.toString());
        }
        if (token == null || token.equals("")) {
            str.append("No existe token en la peticion.");
            throw new Exception(str.toString());
        }
        String descencriptarUsr = null;
        if (updater != null) {
            if (updater.equals("1")) {
                descencriptarUsr = UpdateEncryp.decrypt(user);
            }
        } else {
            descencriptarUsr = Encriptacion.decrypt(user);
        }
        String tokenPOS = token;
        Segusuario usrVali = em.find(Segusuario.class, descencriptarUsr);
        if (usrVali == null) {
            throw new Exception("El usuario :" + descencriptarUsr + " no existe");
        }
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        String fechaAhora    = format.format(new Date());
        Date forFechaAhora   = format.parse(fechaAhora);
        Calendar calFechaAhora = Calendar.getInstance();
        calFechaAhora.setTime(forFechaAhora);
        Calendar calFechaAntes = Calendar.getInstance();
        calFechaAntes.setTime(forFechaAhora);
        calFechaAntes.add(Calendar.HOUR, -1);
        fechaAhora    = format.format(calFechaAhora.getTime());
        String fechaAnterior = format.format(calFechaAntes.getTime());
        String TokenAhora = ejbUtilsPOS.crearTokenWebservice(descencriptarUsr, fechaAhora);
        String TokenAntes = ejbUtilsPOS.crearTokenWebservice(descencriptarUsr, fechaAnterior);
        List < String > lstHash = new ArrayList();
        lstHash.add(TokenAhora);
        lstHash.add(TokenAntes);
        if (!lstHash.contains(tokenPOS)) {
           throw new Exception("El token no es invalido.");
        }
        ReponseWs resp = new ReponseWs(Numeros.DOSCIENTOS.intValue(),
                "OK", "0", fecha);
        resp.setFecha(fecha);
        resp.setUsuario(descencriptarUsr);
        return resp;
    }
    
    
    
        @POST
    @Path("/respuestaAprobacion")
    public String respuestaAprobacion(@HeaderParam("autorizacion")
                                    String auth, String json) throws Exception {
        ReponseWs resp;
        try {
            if (auth == null || auth.equals("")) {
                throw new Exception("No vienen datos para autorizar acceso");
            }
            resp = lookupProcesosSeg().validarAccesoSinTokenIntWS(auth);
            if (resp != null && resp.getError().equals("1")) {
                throw new Exception(resp.getDescripcion());
            }

            resp = new ReponseWs();
            resp.setContent("Se guardo existosamente.");
            resp.setDescripcion("-");
            resp.setError("0");
            resp.setStatus(Response.Status.OK.getStatusCode());
            return new Gson().toJson(resp);
        } catch (Exception e) {
            Logger.getLogger(PosResource.class.getName()).log(Level.SEVERE, null, e);
            throw new WSATException(e.getMessage());
        }
    }
    
    
    
    
    
        public final void invalidarCacheEM(final Gencatsdeta valorem)
            throws Exception {
        EntityManagerFactory factory
              = Persistence.createEntityManagerFactory(valorem.getDsccor());
        EntityManager eme = factory.createEntityManager();
        eme.getEntityManagerFactory().getCache().evictAll();
    }
    
    
                utx.begin();
            em.createNativeQuery(
                    String.format("BEGIN EXECUTE IMMEDIATE q'{ %s }';  END;",
                    query)).executeUpdate();
            utx.commit();
            
            
                        utx.begin();
            em.createNativeQuery(
                    String.format("BEGIN EXECUTE IMMEDIATE q'{ %s }';  END;",
                    query)).executeUpdate();
            utx.commit();
